import pandas as pd  # bibliothÃ¨que pour lire et manipuler fichier csv
import random as rd  # bibliothÃ¨que pour faire des choix alÃ©atoires

# Lire le fichier CSV contenant les tweets
# encoding="latin-1" permet d'ouvrir correctement les caractÃ¨res spÃ©ciaux
# header=None signifie que le fichier n'a pas de ligne de titre
df = pd.read_csv("balanced_tweets_200k.csv", encoding="latin-1", header=None)

# On donne des noms aux colonnes du tableau pour y accÃ©der plus facilement
df.columns = ["polarity", "id", "date", "query", "user", "text"]

# On garde uniquement les tweets qui ont une polaritÃ© de 0 (nÃ©gatif) ou 4 (positif)
df = df[df["polarity"].isin([0, 4])]

# On prend un Ã©chantillon alÃ©atoire de 5000 tweets pour l'Ã©valuation
# reset_index(drop=True) rÃ©initialise les numÃ©ros de lignes
df = df.sample(5000).reset_index(drop=True)

# Fonction pour afficher la polaritÃ© sous forme de texte lisible
def interpret_polarity(p):
    return "nÃ©gatif" if p == 0 else "positif"

# Initialisation des compteurs qui servent Ã  quantifier Ã  quel point je suis d'accord avec le scorring 
total = 0    # nombre total dâ€™Ã©valuations effectuÃ©es
correct = 0  # nombre dâ€™Ã©valuations jugÃ©es correctes par lâ€™utilisateur

# Instructions pour lâ€™utilisateur
print("Tape 'bon' si tu es d'accord avec la polaritÃ©, 'pas bon' sinon. Tape 'stop' pour arrÃªter.\n")

# Boucle dâ€™Ã©valuation des tweets
while True:
    # SÃ©lectionne un tweet au hasard parmi les 5000
    row = df.sample(1).iloc[0]

    # RÃ©cupÃ¨re le texte du tweet et sa polaritÃ© interprÃ©tÃ©e en texte
    tweet = row["text"]
    sentiment = interpret_polarity(row["polarity"])

    # Affiche le tweet et la polaritÃ© dÃ©tectÃ©e automatiquement
    print(f"Tweet : {tweet}")
    print(f"PolaritÃ© dÃ©tectÃ©e : {sentiment}")

    # Demande Ã  lâ€™utilisateur de donner son avis
    user_input = input("â†’ Ton avis ('bon' / 'pas bon' / 'stop') : ").strip().lower()

    # Si l'utilisateur veut arrÃªter l'Ã©valuation
    if user_input == "stop":
        break
    # Si l'utilisateur est d'accord avec lâ€™Ã©tiquette automatique
    elif user_input == "bon":
        correct += 1
        total += 1
    # Si l'utilisateur pense que la polaritÃ© est incorrecte
    elif user_input == "pas bon":
        total += 1
    # Si l'utilisateur tape autre chose
    else:
        print("RÃ©ponse invalide. RÃ©essaye.")

# AprÃ¨s la boucle, afficher les rÃ©sultats
if total > 0:
    # Calcul du score : proportion de bonnes rÃ©ponses
    normalized_score = correct / total
    print(f"\nâœ… Score validÃ© pour {correct} / {total} Ã©valuations.")
    print(f"ðŸŽ¯ Score normalisÃ© : {normalized_score:.2f}")
else:
    # Si lâ€™utilisateur nâ€™a rien Ã©valuÃ©
    print("\nAucune Ã©valuation effectuÃ©e.")